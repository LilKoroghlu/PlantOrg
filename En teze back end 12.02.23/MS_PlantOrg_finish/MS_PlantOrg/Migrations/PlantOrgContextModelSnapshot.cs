// <auto-generated />
using System;
using MS_PlantOrg.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MS_PlantOrg.Migrations
{
    [DbContext(typeof(PlantOrgContext))]
    partial class PlantOrgContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MS_PlantOrg.Models.Appeal", b =>
                {
                    b.Property<int>("AppealId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppealId"), 1L, 1);

                    b.Property<int?>("AppealClientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AppealDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("AppealOperatorId")
                        .HasColumnType("int");

                    b.Property<int?>("AppealPlantId")
                        .HasColumnType("int");

                    b.Property<bool?>("EndOrNotEnd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("PaidOrUnpaid12")
                        .HasColumnType("int")
                        .HasColumnName("PaidOrUnpaid_1_2");

                    b.HasKey("AppealId");

                    b.HasIndex("AppealPlantId");

                    b.ToTable("Appeal", (string)null);
                });

            modelBuilder.Entity("MS_PlantOrg.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"), 1L, 1);

                    b.Property<int>("CityCountryId")
                        .HasColumnType("int");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityId");

                    b.HasIndex("CityCountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("MS_PlantOrg.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"), 1L, 1);

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("MS_PlantOrg.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Message1")
                        .HasColumnType("text")
                        .HasColumnName("Message");

                    b.Property<int?>("OperatorId")
                        .HasColumnType("int");

                    b.Property<bool?>("SendByUser")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("MS_PlantOrg.Models.OperatorPlant", b =>
                {
                    b.Property<int>("OpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OP_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OpId"), 1L, 1);

                    b.Property<int?>("OpOperatorId")
                        .HasColumnType("int")
                        .HasColumnName("OP_OperatorId");

                    b.Property<int?>("OpPlantId")
                        .HasColumnType("int")
                        .HasColumnName("OP_PlantId");

                    b.HasKey("OpId")
                        .HasName("PK__Operator__C7FDFD420BAA310F");

                    b.ToTable("OperatorPlant", (string)null);
                });

            modelBuilder.Entity("MS_PlantOrg.Models.OperatorPlantType", b =>
                {
                    b.Property<int>("OptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OPT_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OptId"), 1L, 1);

                    b.Property<int?>("OptOperatorId")
                        .HasColumnType("int")
                        .HasColumnName("OPT_OperatorId");

                    b.Property<int?>("OptPlanTypetId")
                        .HasColumnType("int")
                        .HasColumnName("OPT_PlanTypetId");

                    b.HasKey("OptId")
                        .HasName("PK__Operator__140CDAA957AD07AD");

                    b.ToTable("OperatorPlantType", (string)null);
                });

            modelBuilder.Entity("MS_PlantOrg.Models.Plant", b =>
                {
                    b.Property<int>("PlantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlantId"), 1L, 1);

                    b.Property<string>("PlantName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlantNameEng")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("PlantPlantTypeId")
                        .HasColumnType("int");

                    b.HasKey("PlantId");

                    b.HasIndex("PlantPlantTypeId");

                    b.ToTable("Plant", (string)null);
                });

            modelBuilder.Entity("MS_PlantOrg.Models.PlantType", b =>
                {
                    b.Property<int>("PlantTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlantTypeId"), 1L, 1);

                    b.Property<int?>("PlantPrice")
                        .HasColumnType("int");

                    b.Property<string>("PlantTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlantTypeNameEng")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("PlantTypeId");

                    b.ToTable("PlantType", (string)null);
                });

            modelBuilder.Entity("MS_PlantOrg.Models.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingId"), 1L, 1);

                    b.Property<int?>("RatingAppealId")
                        .HasColumnType("int");

                    b.Property<int?>("RatingClientId")
                        .HasColumnType("int");

                    b.Property<int?>("RatingOperatorId")
                        .HasColumnType("int");

                    b.Property<int?>("RatingValue")
                        .HasColumnType("int");

                    b.HasKey("RatingId");

                    b.ToTable("Rating", (string)null);
                });

            modelBuilder.Entity("MS_PlantOrg.Models.Statuse", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"), 1L, 1);

                    b.Property<string>("StatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId")
                        .HasName("PK__Statuse__C8EE2063C7E8719A");

                    b.ToTable("Statuse", (string)null);
                });

            modelBuilder.Entity("MS_PlantOrg.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<int?>("UserCityId")
                        .HasColumnType("int");

                    b.Property<int?>("UserCountryId")
                        .HasColumnType("int");

                    b.Property<string>("UserEmail")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("UserPhone")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("UserProfilePhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UserRegDate")
                        .HasColumnType("date");

                    b.Property<int?>("UserStatusId")
                        .HasColumnType("int");

                    b.Property<string>("UserSurname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("UserCityId");

                    b.HasIndex("UserCountryId");

                    b.HasIndex("UserStatusId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MS_PlantOrg.Models.Appeal", b =>
                {
                    b.HasOne("MS_PlantOrg.Models.Plant", "AppealPlant")
                        .WithMany("Appeals")
                        .HasForeignKey("AppealPlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Appeal__AppealPl__4E88ABD4");

                    b.Navigation("AppealPlant");
                });

            modelBuilder.Entity("MS_PlantOrg.Models.City", b =>
                {
                    b.HasOne("MS_PlantOrg.Models.Country", "CityCountry")
                        .WithMany("Cities")
                        .HasForeignKey("CityCountryId")
                        .IsRequired()
                        .HasConstraintName("FK_City_Country");

                    b.Navigation("CityCountry");
                });

            modelBuilder.Entity("MS_PlantOrg.Models.Plant", b =>
                {
                    b.HasOne("MS_PlantOrg.Models.PlantType", "PlantPlantType")
                        .WithMany("Plants")
                        .HasForeignKey("PlantPlantTypeId")
                        .HasConstraintName("FK__Plant__PlantPlan__46E78A0C");

                    b.Navigation("PlantPlantType");
                });

            modelBuilder.Entity("MS_PlantOrg.Models.User", b =>
                {
                    b.HasOne("MS_PlantOrg.Models.City", "UserCity")
                        .WithMany("Users")
                        .HasForeignKey("UserCityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_User_City");

                    b.HasOne("MS_PlantOrg.Models.Country", "UserCountry")
                        .WithMany("Users")
                        .HasForeignKey("UserCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_User_Country");

                    b.HasOne("MS_PlantOrg.Models.Statuse", "UserStatus")
                        .WithMany("Users")
                        .HasForeignKey("UserStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Users__UserStatu__403A8C7D");

                    b.Navigation("UserCity");

                    b.Navigation("UserCountry");

                    b.Navigation("UserStatus");
                });

            modelBuilder.Entity("MS_PlantOrg.Models.City", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MS_PlantOrg.Models.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MS_PlantOrg.Models.Plant", b =>
                {
                    b.Navigation("Appeals");
                });

            modelBuilder.Entity("MS_PlantOrg.Models.PlantType", b =>
                {
                    b.Navigation("Plants");
                });

            modelBuilder.Entity("MS_PlantOrg.Models.Statuse", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
